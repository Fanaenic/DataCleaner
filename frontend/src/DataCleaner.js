import React, { useState } from 'react';
import axios from 'axios';
import './DataCleaner.css';

const API_BASE = 'http://localhost:8000';

const DataCleaner = ({ user, onLogout }) => {
  const [file, setFile] = useState(null);
  const [processedImage, setProcessedImage] = useState(null);
  const [loading, setLoading] = useState(false);
  const [message, setMessage] = useState('');
  const [facesDetected, setFacesDetected] = useState(0);

  const handleFileChange = (e) => {
    const selectedFile = e.target.files[0];
    if (selectedFile) {
      if (!selectedFile.type.startsWith('image/')) {
        setMessage('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
        return;
      }

      setFile(selectedFile);
      setProcessedImage(null);
      setMessage('');
      setFacesDetected(0);
    }
  };

  const handleUpload = async () => {
    if (!file) {
      setMessage('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å–Ω–∞—á–∞–ª–∞');
      return;
    }

    const formData = new FormData();
    formData.append('file', file);

    setLoading(true);
    setMessage('üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...');

    try {
      const response = await axios.post(`${API_BASE}/upload/`, formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
          'Authorization': `Bearer ${user.token}`
        },
        timeout: 30000,
      });

      setProcessedImage(`${API_BASE}${response.data.processed_url}`);
      setFacesDetected(response.data.faces_detected);
      setMessage(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ! –†–∞–∑–º—ã—Ç–æ –æ–±–ª–∞—Å—Ç–µ–π: ${response.data.faces_detected}`);

    } catch (error) {
      console.error('Error details:', error);
      if (error.response?.status === 401) {
        setMessage('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.');
        onLogout();
      } else if (error.code === 'ECONNABORTED') {
        setMessage('‚ùå –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      } else if (error.response) {
        setMessage(`‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${error.response.data.detail}`);
      } else if (error.request) {
        setMessage('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É.');
      } else {
        setMessage(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
      }
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="data-cleaner">
      <header className="cleaner-header">
        <div className="header-content">
          <h1>üõ°Ô∏è –û—á–∏—Å—Ç–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</h1>
          <div className="user-info">
            <span>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.user.name}!</span>
            <button onClick={onLogout} className="logout-btn">–í—ã–π—Ç–∏</button>
          </div>
        </div>
        <p>–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ —á—Ç–æ–±—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–º—ã—Ç—å –ª–∏—Ü–∞ –∏ –Ω–æ–º–µ—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π</p>

        <div className="upload-section">
          <div className="file-input-container">
            <input
              type="file"
              onChange={handleFileChange}
              accept="image/*"
              className="file-input"
              id="fileInput"
            />
            <label htmlFor="fileInput" className="file-label">
              üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            </label>
            {file && (
              <div className="file-info">
                <span className="file-name">üìÑ {file.name}</span>
                <span className="file-size">({(file.size / 1024 / 1024).toFixed(2)} MB)</span>
              </div>
            )}
          </div>

          <button
            onClick={handleUpload}
            disabled={loading || !file}
            className="upload-button"
          >
            {loading ? '‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞...' : 'üöÄ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'}
          </button>
        </div>

        {message && (
          <div className={`message ${message.includes('‚ùå') ? 'error' : 'success'}`}>
            {message}
          </div>
        )}

        <div className="images-container">
          {file && (
            <div className="image-section">
              <h3>üì∑ –û—Ä–∏–≥–∏–Ω–∞–ª</h3>
              <img
                src={URL.createObjectURL(file)}
                alt="Original"
                className="preview-image"
              />
              <div className="image-info">
                <p>–†–∞–∑–º–µ—Ä: {file.size > 1024 * 1024
                  ? `${(file.size / 1024 / 1024).toFixed(2)} MB`
                  : `${(file.size / 1024).toFixed(2)} KB`}</p>
              </div>
            </div>
          )}

          {processedImage && (
            <div className="image-section">
              <h3>‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç</h3>
              <img
                src={processedImage}
                alt="Processed"
                className="preview-image"
              />
              <div className="image-info">
                <p>–†–∞–∑–º—ã—Ç–æ –æ–±–ª–∞—Å—Ç–µ–π: <strong>{facesDetected}</strong></p>
                <p>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–º—ã—Ç–∞ –Ω–∏–∂–Ω—è—è —á–∞—Å—Ç—å (–Ω–æ–º–µ—Ä–∞)</p>
              </div>
              <a
                href={processedImage}
                download
                className="download-btn"
              >
                üíæ –°–∫–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
              </a>
            </div>
          )}
        </div>
      </header>
    </div>
  );
};

export default DataCleaner;